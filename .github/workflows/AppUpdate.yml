# This is a basic workflow to help you get started with Actions

name: AppUpdate

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Run Powershell Get Apps Updates Script
        shell: pwsh
        id: ansible
        run: |
          $AllReleases = Invoke-RestMethod -Uri 'https://api.github.com/repos/ansible/ansible/releases' -UseBasicParsing | Sort-Object tag_name 
          $LatesRelease = $AllReleases | Select -First 1
          $LatesVersion = $LatesRelease.tag_name.Substring(1)
          echo "LatesAnsible=$($LatesVersion)" >> $env:GITHUB_ENV

      - name: Run Powershell Get Apps Updates Script
        shell: pwsh
        id: splunk
        run: |
          $download_page = Invoke-WebRequest -Uri "https://www.splunk.com/en_us/download/universal-forwarder.html" -UseBasicParsing -UserAgent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36"

          $x86matched = $download_page.Content -match 'data-filename="(splunkforwarder-\S+-x86-release\.msi)" data-link="(https://\S+\.msi)"'
          if ($x86matched) {
              $x86_filename = $matches[1]
              $x86_url = $matches[2]
          }
          Else
          {
              Write-Error "Could not find x86 file"
          }

          $x64matched = $download_page.Content -match 'data-filename="(splunkforwarder-\S+-x64-release\.msi)" data-link="(https://\S+\.msi)"'
          if ($x64matched) {
              $x64_filename = $matches[1]
              $x64_url = $matches[2]
          }
          Else
          {
              Write-Error "Could not find x64 file"
          }

          $LatesVersion = ($x64_filename -split '-')[1]
          echo "::set-output name=LatesSplunk::$($LatesVersion)
          echo "LatesSplunk=$($LatesVersion)" >> $env:GITHUB_ENV

      - name: Get Env
        shell: pwsh
        id: env
        run: |
          dir env:
            
      - name: Send Email With SendGrid
        uses: licenseware/send-email-notification@v1
        with:
          from-email: devops.team.sdb@gmail.com
          to-email: ${{ secrets.SENDGRID_TO }}
          api-key: ${{ secrets.SENDGRID_TOKEN }}
          subject: Updates for Apps
          markdown-body: |
            Splunk - ${{ steps.splunk.outputs.stdout }}
            ${{ steps.splunk.outputs.LatesSplunk }}



